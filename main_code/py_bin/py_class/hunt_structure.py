# -*- coding: utf-8 -*-
"""
-------------------------------------------------------------------------------------------------------------------------
uv_structures.py
-------------------------------------------------------------------------------------------------------------------------
Created on Wed Apr  3 15:02:00 2024

@author: Andres Cremades Botella

File to define the uv structures:
    Class:
        - uv_structure : Class of the Reynolds stress coherent structures.
"""
# -----------------------------------------------------------------------------------------------------------------------
# Import packages for all functions
# -----------------------------------------------------------------------------------------------------------------------
import os
import numpy as np
import h5py
from py_bin.py_class.flow_field import flow_field

# -----------------------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------------------
# Define functions
# -----------------------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------------------

class hunt_structure():
    """
    .....................................................................................................................
    # streak_structure: Class of the streak coherent structures.
        * Functions:
            - __init__ : initialization function
            - calculate_matstruc : calculate the matrix containing the nodes included in the transverse Reynolds stress
                                   structures.
            - segment_struc      : calculates the segmentation of the domain based on the transverse Reynolds stress
                                   structures.
            - save_struc         : function to save the structures
            - read_struc         : function to read the structures
        * Variables:
            - uvw_folder  : folder of the velocity flow fields
            - uvw_file    : file of the velocity flow fields
            - Hperc       : percolation index
            - index       : index of the field to read
            - dx          : downsampling in the streamwise direction
            - dy          : downsampling in the wall-normal direction
            - dz          : downsampling in the streamwise direction
            - L_x         : streamwise dimension of the channel
            - L_y         : wall-normal dimension of the channel
            - L_z         : spanwise dimension of the channel
            - rey         : friction Reynolds number
            - utau        : frictin velocity
            - padding     : padding of the fields
            - data_folder : folder containing the data generated by the code
            - umean_file  : mean velocity file
            - urms_file   : rms velocity file
            - sym_quad    : flag fo using the symmetry of the direction 2 of the field for calculating the quadrant
                            of the structure
            - filvol      : volume for filtering the structures
            - shap_folder : folder of the SHAP values
            - shap_file   : file of the SHAP values
            - folder      : folder to save the uv structures
            - file        : file to save the uv structures
            - shpy        : shape of the tensors in the wall-normal direction
            - shpx        : shape of the tensors in the streamwise direction
            - shpz        : shape of the tensors in the spanwise direction
            - mat_struc   : matrix defining the nodes contained in the structures
            - field_u     : field of the streamwise velocity
            - field_v     : field of the wall-normal velocity
        * Classes:
            - structures  : class containing the structure information (read from py_bin.py_class.structures)
    .....................................................................................................................
    """
    def __init__(self,data_in={"uvw_folder":"../../P125_21pi_vu/","uvw_file":"P125_21pi_vu.$INDEX$.h5.uvw","Hperc":1.75,
                               "index":7000,"dx":1,"dy":1,"dz":1,"L_x":2*np.pi,"L_y":1,"L_z":np.pi,"rey":125,
                               "utau":0.060523258443963,"padding":15,"data_folder":"Data","umean_file":"Umean.txt",
                               "urms_file":"Urms.txt","sym_quad":True,"filvol":2.7e4,
                               "shap_folder":"../../P125_21pi_vu_SHAP_UnetXAI_gradient/",
                               "shap_file":"P125_21pi_vu.$INDEX$.h5.shap","folder":"../../P125_21pi_vu_huntstruc/",
                               "file":"P125_21pi_vu.$INDEX$.h5.hunt","padding":15,"data_type":"float32"}):
        """
        .................................................................................................................
        # __init__
        .................................................................................................................
        Function to initilize the uv structures.

        Parameters
        ----------
        data_in : dict, optional
            Data for initilizing the uv structure.
            The default is {"uvw_folder":"../../P125_21pi_vu/","uvw_file":"P125_21pi_vu.$INDEX$.h5.uvw","Hperc":1.75,
                            "index":7000,"dx":1,"dy":1,"dz":1,"L_x":2*np.pi,"L_y":1,"L_z":np.pi,"rey":125,
                            "utau":0.060523258443963,"padding":15,"data_folder":"Data","umean_file":"Umean.txt",
                            "filvol":2.7e4,"shap_folder":"../../P125_21pi_vu_SHAP_UnetXAI_gradient/",
                            "shap_file":"P125_21pi_vu.$INDEX$.h5.shap","folder":"../../P125_21pi_vu_huntstruc/",
                            "file":"P125_21pi_vu.$INDEX$.h5.hunt","padding":15,"data_type":"float32"}.
            Data:
                - uvw_folder  : folder of the velocity flow fields
                - uvw_file    : file of the velocity flow fields
                - Hperc       : percolation index
                - index       : index of the field to read
                - dx          : downsampling in the streamwise direction
                - dy          : downsampling in the wall-normal direction
                - dz          : downsampling in the streamwise direction
                - L_x         : streamwise dimension of the channel
                - L_y         : wall-normal dimension of the channel
                - L_z         : spanwise dimension of the channel
                - rey         : friction Reynolds number
                - utau        : frictin velocity
                - padding     : padding of the fields
                - data_folder : folder containing the data generated by the code
                - umean_file  : mean velocity file
                - urms_file   : rms velocity file
                - sym_quad    : flag fo using the symmetry of the direction 2 of the field for calculating the quadrant
                                of the structure
                - filvol      : volume for filtering the structures
                - shap_folder : folder of the SHAP values
                - shap_file   : file of the SHAP values
                - folder      : folder to save the uv structures
                - file        : file to save the uv structures
                - padding     : padding of the fields
                - data_type   : type of float used for the data (float16, float32...)
        Returns
        -------
        None.

        """
        # -----------------------------------------------------------------------------------------------------------------
        # Import dataset
        # -----------------------------------------------------------------------------------------------------------------
        from py_bin.py_functions.read_velocity import read_velocity
        
        # -----------------------------------------------------------------------------------------------------------------
        # Read data
        # -----------------------------------------------------------------------------------------------------------------
        self.uvw_folder  = str(data_in["uvw_folder"])  # folder of the flow field data
        self.uvw_file    = str(data_in["uvw_file"])    # file of the flow field
        self.Hperc       = float(data_in["Hperc"])     # percolation index
        self.index       = int(data_in["index"])       # index of the field to read
        self.down_x      = int(data_in["dx"])          # downsampling in the x direction
        self.down_y      = int(data_in["dy"])          # downsampling in the y direction
        self.down_z      = int(data_in["dz"])          # downsampling in the z direction
        self.L_x         = float(data_in["L_x"])       # dimension in the x direction
        self.L_y         = float(data_in["L_y"])       # dimension in the y direction
        self.L_z         = float(data_in["L_z"])       # dimension in the z direction
        self.rey         = float(data_in["rey"])       # friction reynolds number
        self.utau        = float(data_in["utau"])      # friction velocity
        self.padding     = int(data_in["padding"])     # padding of the fields
        self.data_folder = str(data_in["data_folder"]) # folder to store the data generated by the code
        self.umean_file  = str(data_in["umean_file"])  # file of the mean velocity
        self.urms_file   = str(data_in["urms_file"])   # file of the rms velocity
        self.sym_quad    = bool(data_in["sym_quad"])   # flag for using the simmetry on direction 2 of field for quadrants
        self.filvol      = float(data_in["filvol"])    # volume for filtering the structures
        self.shap_folder = str(data_in["shap_folder"]) # folder of the SHAP values
        self.shap_file   = str(data_in["shap_file"])   # file of the SHAP values
        self.folder      = str(data_in["folder"])      # folder to save the uv structures
        self.file        = str(data_in["file"])        # file to save the uv structures
        self.padding     = int(data_in["padding"])
        self.data_type   = str(data_in["data_type"])
                
        # -----------------------------------------------------------------------------------------------------------------
        # Create the flow field
        # -----------------------------------------------------------------------------------------------------------------
        Data_flow = {"folder":self.uvw_folder,"file":self.uvw_file,"down_x":self.down_x,"down_y":self.down_y,
                     "down_z":self.down_z,"L_x":self.L_x,"L_y":self.L_y,"L_z":self.L_z,"rey":self.rey,"utau":self.utau}
        flowfield = flow_field(data_in=Data_flow)
        flowfield.shape_tensor()
        
        # -----------------------------------------------------------------------------------------------------------------
        # Calculate the shape of the fields
        # -----------------------------------------------------------------------------------------------------------------
        self.shpy = flowfield.shpy   # Shape in y
        self.shpz = flowfield.shpz   # Shape in z
        self.shpx = flowfield.shpx   # Shape in x
        
        # -----------------------------------------------------------------------------------------------------------------
        # Read the velocity
        # -----------------------------------------------------------------------------------------------------------------
        data_read_vel  = {"folder":self.uvw_folder,"file":self.uvw_file,"index":self.index,
                          "dx":self.down_x,"dy":self.down_y,"dz":self.down_z,"shpx":self.shpx,"shpy":self.shpy,
                          "shpz":self.shpz,"padding":0,"data_folder":self.data_folder,"umean_file":self.umean_file}
        data_vel       = read_velocity(data_in=data_read_vel)
        self.field_u   = data_vel["uu"]
        self.field_v   = data_vel["vv"]
        self.field_w   = data_vel["ww"]
        
    def calculate_matstruc(self):
        """        
        .................................................................................................................
        # calculate_matstruc
        .................................................................................................................
        Function to calculate the matrix of the nodes belonging a structure

        Returns
        -------
        None.

        """
        # ---------------------------------------------------------------------------------------------------------------
        # The definition of the streaks is not implemented
        # ---------------------------------------------------------------------------------------------------------------
    
    def segment_struc(self):
        """       
        .................................................................................................................
        # segment_struc
        ................................................................................................................. 
        Function to segment the domain into the different structures

        Returns
        -------
        None.

        """
        # ---------------------------------------------------------------------------------------------------------------
        # The definition of the streaks is not implemented
        # ---------------------------------------------------------------------------------------------------------------
    
    def save_struc(self):
        """
        .................................................................................................................
        # save_struc
        .................................................................................................................
        Function to save the parameters of the structure

        Returns
        -------
        None.

        """
        # ---------------------------------------------------------------------------------------------------------------
        # The definition of the streaks is not implemented
        # ---------------------------------------------------------------------------------------------------------------
        
    def read_struc(self):
        """
        .................................................................................................................
        # read_struc
        .................................................................................................................
        Function to read the parameters of the structure

        Returns
        -------
        None.

        """
        # ---------------------------------------------------------------------------------------------------------------
        # Import packages
        # ---------------------------------------------------------------------------------------------------------------
        from py_bin.py_class.structures import structures
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the path to the file
        # ---------------------------------------------------------------------------------------------------------------
        file_Q    = self.folder+"/"+self.file
        file_Q_ii = file_Q.replace("$INDEX$",str(self.index))
        print('Reading: '+file_Q_ii,flush=True)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the file with the saved information
        # ---------------------------------------------------------------------------------------------------------------
        file           = h5py.File(file_Q_ii,'r')
        self.mat_struc = np.array(file['Qs'])
        
        # ---------------------------------------------------------------------------------------------------------------
        # Define the structure class
        # ---------------------------------------------------------------------------------------------------------------
        data_struc      = {"mat_struc":self.mat_struc,"field_1":self.field_u,"field_2":self.field_v,
                           "field_3":self.field_w,"flag_sign":False,"uvw_folder":self.uvw_folder,
                           "uvw_file":self.uvw_file,"dx":self.down_x,"dy":self.down_y,"dz":self.down_z,
                           "L_x":self.L_x,"L_y":self.L_y,"L_z":self.L_z,"rey":self.rey,"utau":self.utau,
                           "sym_quad":self.sym_quad,"filvol":self.filvol,"shap_folder":self.shap_folder,
                           "shap_file":self.shap_file}
        self.structures = structures(data_in=data_struc)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the rest of the data
        # ---------------------------------------------------------------------------------------------------------------
        self.structures.mat_segment          = np.array(file['Qs_segment'])
        self.structures.mat_segment_filtered = np.array(file['Qs_segment_filtered'])
        self.structures.dim_x                = np.array(file['dim_x'])
        self.structures.dim_y                = np.array(file['dim_y'])
        self.structures.dim_z                = np.array(file['dim_z'])
        self.structures.ymin                 = np.array(file['ymin'])
        self.structures.ymax                 = np.array(file['ymax'])
        self.structures.vol                  = np.array(file['vol'])
        self.structures.boxvol               = np.array(file['volbox'])
        self.structures.cg_xbox              = np.array(file['cg_xbox'])
        self.structures.cg_ybox              = np.array(file['cg_ybox'])
        self.structures.cg_zbox              = np.array(file['cg_zbox'])
        self.structures.cg_x                 = np.array(file['cg_x'])
        self.structures.cg_y                 = np.array(file['cg_y'])
        self.structures.cg_z                 = np.array(file['cg_z'])
        self.structures.uv_uvtot             = np.array(file['uv_uvtot'])
        self.structures.k_ktot               = np.array(file['k_ktot'])
        self.structures.u1u2                 = np.array(file['uv_uvtot'])
        self.structures.k_ktot               = np.array(file['k_ktot'])
        try:
            self.shap                        = np.array(file['shap'])
        except:
            pass
            
    def reconstruct_fromprevious(self,data_in={"previous_folder":"../../P125_21pi_vu_hunt",
                                               "previous_file":"P125_21pi_vu.$INDEX$.h5.hunt"}):
        """
        .................................................................................................................
        # reconstruct_fromprevious
        .................................................................................................................
        Function for creating the structures data from the previous structures folder

        Parameters
        ----------
        data_in : dict, optional
            Name of the folder and file of the file of the previous data.
            The default is {"previous_folder":"../../P125_21pi_vu_hunt",
                            "previous_file":"P125_21pi_vu.$INDEX$.h5.hunt"}.
            Data:
                - previous_folder   : folder of the previous data
                - previous_file     : file of the previous data

        Returns
        -------
        None.

        """
        # ---------------------------------------------------------------------------------------------------------------
        # Define the packages
        # ---------------------------------------------------------------------------------------------------------------
        import h5py
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the data
        # ---------------------------------------------------------------------------------------------------------------
        previous_folder = str(data_in["previous_folder"])
        previous_file   = str(data_in["previous_file"])
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the folder
        # ---------------------------------------------------------------------------------------------------------------
        try:
            os.mkdir(self.folder)
        except:
            print("Folder "+str(self.folder)+" is already created.",flush=True)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the file
        # ---------------------------------------------------------------------------------------------------------------
        previous_read   = (previous_folder+'/'+previous_file).replace('$INDEX$',str(self.index))
        file_read       = h5py.File(previous_read,'r')
        file_save       = (self.folder+'/'+self.file).replace('$INDEX$',str(self.index))
        file_write      = h5py.File(file_save,'w')
        
        # ---------------------------------------------------------------------------------------------------------------
        # The conversions required for updating the uv structures are the following:
        #     - cg_x is not existing in the original files. The original file contains cdg_x which is expressed
        #       relative to the channel width. It needs to be converted to the viscous units
        #     - cg_y is not existing in the original files. The original file contains cdg_y which is expressed
        #       relative to the channel width. It needs to be converted to the viscous units. In addition, it requires
        #       to be expressed from the nearest wall.
        #     - cg_z is not existing in the original files. The original file contains cdg_z which is expressed
        #       relative to the channel width. It needs to be converted to the viscous units
        #     - cg_xbox is not exiting in the original files, the original is cdg_xbox
        #     - cg_ybox is not exiting in the original files, the original is cdg_ybox
        #     - cg_zbox is not exiting in the original files, the original is cdg_zbox
        #     - dim_x is not existing in the original files. The original file contains dx which is expressed
        #       relative to the channel width. It needs to be converted to the viscous units
        #     - dim_y is not existing in the original files. The original file contains dy which is expressed
        #       relative to the channel width. It needs to be converted to the viscous units
        #     - dim_z is not existing in the original files. The original file contains dz which is expressed
        #       relative to the channel width. It needs to be converted to the viscous units
        #     - uv_tot is not existing in the original files, it needs to be calculated.
        #     - volbox is expressed relative to the channel width. It needs to be converted to the viscous units
        #     - ymax is not expressed as the maximum distance to the nearest wall to the center of gravity
        #     - ymin is not expressed as the minimum distance to the nearest wall to the center of gravity
        #     - Qs_segment_filtered is not existing
        # Starting generating the fields that are dentical
        # ---------------------------------------------------------------------------------------------------------------
        Qsegment = np.array(file_read["Qs_segment"])
        vol      = np.array(file_read["vol"])
        file_write.create_dataset('cg_xbox',data=np.array(file_read["cdg_xbox"]))
        file_write.create_dataset('cg_ybox',data=np.array(file_read["cdg_ybox"]))
        file_write.create_dataset('cg_zbox',data=np.array(file_read["cdg_zbox"]))
        file_write.create_dataset('Qs',data=np.array(file_read["Qs"]))
        file_write.create_dataset('Qs_segment',data=Qsegment)
        file_write.create_dataset('vol',data=vol)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the cg_x
        # ---------------------------------------------------------------------------------------------------------------
        cg_x = np.array(file_read["cdg_x"])*self.rey
        file_write.create_dataset('cg_x',data=cg_x)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the cg_y
        # ---------------------------------------------------------------------------------------------------------------
        cg_y_read = np.array(file_read["cdg_y"])
        cg_y      = (1-abs(cg_y_read))*self.rey
        file_write.create_dataset('cg_y',data=cg_y)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the cg_z
        # ---------------------------------------------------------------------------------------------------------------
        cg_z = np.array(file_read["cdg_z"])*self.rey
        file_write.create_dataset('cg_z',data=cg_z)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the dim_x
        # ---------------------------------------------------------------------------------------------------------------
        dim_x = np.array(file_read["dx"])*self.rey
        file_write.create_dataset('dim_x',data=dim_x)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the dim_z
        # ---------------------------------------------------------------------------------------------------------------
        dim_z = np.array(file_read["dz"])*self.rey
        file_write.create_dataset('dim_z',data=dim_z)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the ymax and ymin
        # ---------------------------------------------------------------------------------------------------------------
        ymax_read = np.array(file_read["ymax"])
        ymin_read = np.array(file_read["ymin"])
        ymax      = np.array([(1+ymax_read[ii])*self.rey if cg_y_read[ii]<=0 else (1-ymin_read[ii])*self.rey
                              for ii in np.arange(len(cg_y_read))])
        ymin      = np.array([(1+ymin_read[ii])*self.rey if cg_y_read[ii]<=0 else (1-ymax_read[ii])*self.rey
                              for ii in np.arange(len(cg_y_read))])
        file_write.create_dataset('ymax',data=ymax)
        file_write.create_dataset('ymin',data=ymin)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the dim_y
        # ---------------------------------------------------------------------------------------------------------------
        dim_y = ymax-ymin
        file_write.create_dataset('dim_y',data=dim_y)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the volbox
        # ---------------------------------------------------------------------------------------------------------------
        volbox = np.array(file_read["volbox"])*self.rey**3
        file_write.create_dataset('volbox',data=volbox)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create Qs_segment_filtered
        # ---------------------------------------------------------------------------------------------------------------
        Qsegment_filter = Qsegment.copy()
        index_filt      = vol>=self.filvol
        nn              = 1
        for ii in np.arange(len(index_filt)):
            indices = np.where(Qsegment_filter==ii+1)
            if index_filt[ii]:
                Qsegment_filter[indices] = nn
                nn                      += 1
            else:
                Qsegment_filter[indices] = 0
        file_write.create_dataset('Qs_segment_filtered',data=Qsegment_filter)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create uv_uvtot
        # ---------------------------------------------------------------------------------------------------------------
        max_struc = len(vol)
        uv        = np.zeros((max_struc,))
        absuv     = np.abs(np.multiply(self.field_u,self.field_v))
        uvtot     = np.sum(absuv)
        for nn in np.arange(max_struc-1):
            nodes_nn = np.where(Qsegment==nn+1)
            uv[nn]   = np.sum(absuv[nodes_nn])/uvtot
        file_write.create_dataset('uv_uvtot',data=uv)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the energy k_ktot
        # ---------------------------------------------------------------------------------------------------------------
        kk       = np.zeros((max_struc,))
        kk_point = np.sqrt(self.field_u**2+self.field_v**2+self.field_w**2)
        kk_tot   = np.sum(kk_point)
        for nn  in np.arange(max_struc-1):
            nodes_nn = np.where(Qsegment==nn+1)
            kk[nn]   = np.sum(kk_point[nodes_nn])/kk_tot
        file_write.create_dataset('k_ktot',data=kk)
        file_write.close()
        

    def add_SHAP(self,data_in={"nsamples":1}):
        """
        .................................................................................................................
        # add_SHAP
        .................................................................................................................
        Function for adding the total SHAP value of each structure to the structures file
        
        Parameters
        ----------
        data_in : dict, optional
            Name of the folder and file of the file of the previous data.
            The default is {"nsamples":1}.
            Data:
                - nsamples : number of samples of the shap
        
        Returns
        -------
        None.
        
        """
        # ---------------------------------------------------------------------------------------------------------------
        # Import packages
        # ---------------------------------------------------------------------------------------------------------------
        from py_bin.py_class.shap_config import shap_config
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the data
        # ---------------------------------------------------------------------------------------------------------------
        nsamples = int(data_in["nsamples"])
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the structure file
        # ---------------------------------------------------------------------------------------------------------------
        self.read_struc()
        
        # ---------------------------------------------------------------------------------------------------------------
        # Calculate the SHAP value of the structure and save it
        # ---------------------------------------------------------------------------------------------------------------
        data_shap = {"shap_folder":self.shap_folder,"shap_file":self.shap_file,"uvw_folder":self.uvw_folder,
                     "uvw_file":self.uvw_file,"padding":self.padding,"dx":self.down_x,"dy":self.down_y,
                     "dz":self.down_z,"data_folder":"-","umean_file":"-","unorm_file":"-","L_x":self.L_x,
                     "L_z":self.L_z,"L_y":self.L_y,"rey":self.rey,"utau":self.utau,"ngpu":0,"field_ini":0,
                     "field_fin":0,"field_delta":0,"model_folder":"-","model_read":"-","nfil":0,"stride":0,
                     "activation":"-","kernel":0,"pooling":0,"delta_pred":0,"nsamples":nsamples,"nsamples_max":0,
                     "data_type":self.data_type,"error_file":"-","umax_file":"-","urmspred_file":"-",
                     "mean_norm":"-","tfrecord_folder":"-","nrep_field":0,"shap_batch":0,"repeat_exist":False,
                     "flag_model":False}
        shap_model = shap_config(data_in=data_shap)
        self.shap  = shap_model.structure_shap(data_in={"mat_segment":self.structures.mat_segment,
                                                        "index_ii":self.index})["SHAP"]
        self.save_struc()
        
