# -*- coding: utf-8 -*-
"""
-------------------------------------------------------------------------------------------------------------------------
shap_uw_vsign_structure.py
-------------------------------------------------------------------------------------------------------------------------
Created on Wed Apr  3 15:02:00 2024

@author: Andres Cremades Botella

File to define the uv structures:
    Class:
        - shap_structure : Class of the SHAP value coherent structures.
"""
# -----------------------------------------------------------------------------------------------------------------------
# Import packages for all functions
# -----------------------------------------------------------------------------------------------------------------------
import os
import numpy as np
import h5py
from py_bin.py_class.flow_field import flow_field
import sys

# -----------------------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------------------
# Define functions
# -----------------------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------------------

class shap_structure():
    """
    .....................................................................................................................
    # shap_structure: Class of the SHAP value coherent structures.
        * Functions:
            - __init__ : initialization function
            - calculate_matstruc : calculate the matrix containing the nodes included in the transverse Reynolds stress
                                   structures.
            - segment_struc      : calculates the segmentation of the domain based on the transverse Reynolds stress
                                   structures.
            - save_struc         : function to save the structures
            - read_struc         : function to read the structures
        * Variables:
            - uvw_folder  : folder of the velocity flow fields
            - uvw_file    : file of the velocity flow fields
            - Hperc       : percolation index
            - index       : index of the field to read
            - dx          : downsampling in the streamwise direction
            - dy          : downsampling in the wall-normal direction
            - dz          : downsampling in the streamwise direction
            - L_x         : streamwise dimension of the channel
            - L_y         : wall-normal dimension of the channel
            - L_z         : spanwise dimension of the channel
            - rey         : friction Reynolds number
            - utau        : frictin velocity
            - padding     : padding of the fields
            - data_folder : folder containing the data generated by the code
            - umean_file  : mean velocity file
            - urms_file   : rms velocity file
            - sym_quad    : flag fo using the symmetry of the direction 2 of the field for calculating the quadrant
                            of the structure
            - filvol      : volume for filtering the structures
            - shap_folder : folder of the SHAP values
            - shap_file   : file of the SHAP values
            - folder      : folder to save the uv structures
            - file        : file to save the uv structures
            - shpy        : shape of the tensors in the wall-normal direction
            - shpx        : shape of the tensors in the streamwise direction
            - shpz        : shape of the tensors in the spanwise direction
            - mat_struc   : matrix defining the nodes contained in the structures
            - field_u     : field of the streamwise velocity
            - field_v     : field of the wall-normal velocity
        * Classes:
            - structures  : class containing the structure information (read from py_bin.py_class.structures)
    .....................................................................................................................
    """
    def __init__(self,data_in={"uvw_folder":"../../P125_21pi_vu/","uvw_file":"P125_21pi_vu.$INDEX$.h5.uvw","Hperc":1.75,
                               "index":7000,"dx":1,"dy":1,"dz":1,"L_x":2*np.pi,"L_y":1,"L_z":np.pi,"rey":125,
                               "utau":0.060523258443963,"padding":15,"data_folder":"Data","umean_file":"umean.txt",
                               "urms_file":"SHAPrms.txt","sym_quad":True,"filvol":2.7e4,
                               "shap_folder":"../../P125_21pi_vu_SHAP_UnetXAI_gradient/",
                               "shap_file":"P125_21pi_vu.$INDEX$.h5.shap","folder":"../../P125_21pi_vu_Qstruc/",
                               "file":"P125_21pi_vu.$INDEX$.h5.Q","padding":15,"data_type":"float32","nsamples":200,
                               "SHAPrms_file":"SHAPrms.txt"}):
        """
        .................................................................................................................
        # __init__
        .................................................................................................................
        Function to initilize the shap structures.

        Parameters
        ----------
        data_in : dict, optional
            Data for initilizing the uv structure.
            The default is {"uvw_folder":"../../P125_21pi_vu/","uvw_file":"P125_21pi_vu.$INDEX$.h5.uvw","Hperc":1.75,
                            "index":7000,"dx":1,"dy":1,"dz":1,"L_x":2*np.pi,"L_y":1,"L_z":np.pi,"rey":125,
                            "utau":0.060523258443963,"padding":15,"data_folder":"Data","umean_file":"umean.txt",
                            "urms_file":"SHAPrms.txt","sym_quad":True,"filvol":2.7e4,
                            "shap_folder":"../../P125_21pi_vu_SHAP_UnetXAI_gradient/",
                            "shap_file":"P125_21pi_vu.$INDEX$.h5.shap","folder":"../../P125_21pi_vu_Qstruc/",
                            "file":"P125_21pi_vu.$INDEX$.h5.Q","padding":15,"data_type":"float32","nsamples:200",
                            "SHAPrms_file":"SHAPrms.txt","SHAPmean_file":"SHAPmean.txt"}.
            Data:
                - uvw_folder    : folder of the velocity flow fields
                - uvw_file      : file of the velocity flow fields
                - Hperc         : percolation index
                - index         : index of the field to read
                - dx            : downsampling in the streamwise direction
                - dy            : downsampling in the wall-normal direction
                - dz            : downsampling in the streamwise direction
                - L_x           : streamwise dimension of the channel
                - L_y           : wall-normal dimension of the channel
                - L_z           : spanwise dimension of the channel
                - rey           : friction Reynolds number
                - utau          : frictin velocity
                - padding       : padding of the fields
                - data_folder   : folder containing the data generated by the code
                - umean_file    : mean velocity file
                - urms_file     : rms velocity file
                - sym_quad      : flag fo using the symmetry of the direction 2 of the field for calculating the quadrant
                                  of the structure
                - filvol        : volume for filtering the structures
                - shap_folder   : folder of the SHAP values
                - shap_file     : file of the SHAP values
                - folder        : folder to save the uv structures
                - file          : file to save the uv structures
                - padding       : padding of the fields
                - data_type     : type of float used for the data (float16, float32...)
                - nsamples      : number of samples used for the SHAP
                - SHAPrms_file  : file for the RMS of the SHAP values
                - SHAPmean_file : file for the mean of the SHAP values
        Returns
        -------
        None.

        """
        # ---------------------------------------------------------------------------------------------------------------
        # Import dataset
        # ---------------------------------------------------------------------------------------------------------------
        from py_bin.py_class.shap_config import shap_config
        from py_bin.py_functions.shapmean import read_SHAPmean
        from py_bin.py_functions.read_velocity import read_velocity
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read data
        # ---------------------------------------------------------------------------------------------------------------
        self.uvw_folder    = str(data_in["uvw_folder"])  # folder of the flow field data
        self.uvw_file      = str(data_in["uvw_file"])    # file of the flow field
        self.Hperc         = float(data_in["Hperc"])     # percolation index
        self.index         = int(data_in["index"])       # index of the field to read
        self.down_x        = int(data_in["dx"])          # downsampling in the x direction
        self.down_y        = int(data_in["dy"])          # downsampling in the y direction
        self.down_z        = int(data_in["dz"])          # downsampling in the z direction
        self.L_x           = float(data_in["L_x"])       # dimension in the x direction
        self.L_y           = float(data_in["L_y"])       # dimension in the y direction
        self.L_z           = float(data_in["L_z"])       # dimension in the z direction
        self.rey           = float(data_in["rey"])       # friction reynolds number
        self.utau          = float(data_in["utau"])      # friction velocity
        self.padding       = int(data_in["padding"])     # padding of the fields
        self.data_folder   = str(data_in["data_folder"]) # folder to store the data generated by the code
        self.umean_file    = str(data_in["umean_file"])  # file of the mean velocity
        self.urms_file     = str(data_in["urms_file"])   # file of the rms velocity
        self.sym_quad      = bool(data_in["sym_quad"])   # flag for using the simmetry on direction 2 for quadrants
        self.filvol        = float(data_in["filvol"])    # volume for filtering the structures
        self.shap_folder   = str(data_in["shap_folder"]) # folder of the SHAP values
        self.shap_file     = str(data_in["shap_file"])   # file of the SHAP values
        self.folder        = str(data_in["folder"])      # folder to save the uv structures
        self.file          = str(data_in["file"])        # file to save the uv structures
        self.padding       = int(data_in["padding"])
        self.data_type     = str(data_in["data_type"])
        self.nsamples      = int(data_in["nsamples"])
        self.SHAPrms_file  = str(data_in["SHAPrms_file"])
        self.SHAPmean_file = str(data_in["SHAPmean_file"])
                
        # ---------------------------------------------------------------------------------------------------------------
        # Create the flow field
        # ---------------------------------------------------------------------------------------------------------------
        Data_flow = {"folder":self.uvw_folder,"file":self.uvw_file,"down_x":self.down_x,"down_y":self.down_y,
                     "down_z":self.down_z,"L_x":self.L_x,"L_y":self.L_y,"L_z":self.L_z,"rey":self.rey,"utau":self.utau}
        flowfield = flow_field(data_in=Data_flow)
        flowfield.shape_tensor()
        flowfield.flow_grid()
        
        # ---------------------------------------------------------------------------------------------------------------
        # Store total volume
        # ---------------------------------------------------------------------------------------------------------------
        self.voltot_plus = flowfield.voltot_plus
        
        # ---------------------------------------------------------------------------------------------------------------
        # Calculate the shape of the fields
        # ---------------------------------------------------------------------------------------------------------------
        self.shpy = flowfield.shpy   # Shape in y
        self.shpz = flowfield.shpz   # Shape in z
        self.shpx = flowfield.shpx   # Shape in x
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the mean shap
        # ---------------------------------------------------------------------------------------------------------------
        try:
            data_SHAPmean  = read_SHAPmean(data_in={"folder":self.data_folder,"file":self.SHAPmean_file,
                                                    "dy":self.down_y})
            SHAP_umean     = data_SHAPmean["SHAP_umean"]
            SHAP_vmean     = data_SHAPmean["SHAP_vmean"]
            SHAP_wmean     = data_SHAPmean["SHAP_wmean"]
        except:
            print("SHAP structures require mean velocity file. Breaking calculation...",flush=True)
            sys.exit()
            
        # ---------------------------------------------------------------------------------------------------------------
        # Read the shap
        # ---------------------------------------------------------------------------------------------------------------
        data_shap   = {"shap_folder":self.shap_folder,"shap_file":self.shap_file,"uvw_folder":self.uvw_folder,
                       "uvw_file":self.uvw_file,"padding":self.padding,"dx":self.down_x,"dy":self.down_y,
                       "dz":self.down_z,"data_folder":self.data_folder,"umean_file":self.umean_file,
                       "unorm_file":"-","L_x":self.L_x,"L_z":self.L_z,"L_y":self.L_y,"rey":self.rey,
                       "utau":self.utau,"ngpu":0,"field_ini":0,"field_fin":0,"field_delta":0,
                       "model_folder":"-","model_read":"-","nfil":0,"stride":0,"activation":"-","kernel":0,
                       "pooling":0,"delta_pred":0,"nsamples":self.nsamples,"nsamples_max":self.nsamples,
                       "data_type":self.data_type,"error_file":"-","umax_file":"-","urmspred_file":"-",
                       "mean_norm":False,"tfrecord_folder":"-","nrep_field":0,"shap_batch":0,"repeat_exist":False,
                       "flag_model":False}
        shap_model   = shap_config(data_in=data_shap)
        shap_data    = shap_model.read_shap(data_in = {"index":self.index})
        self.field_u = shap_data["SHAP_u"][:,self.padding:-self.padding, 
                                           self.padding:-self.padding]-SHAP_umean.reshape(-1,1,1)
        self.field_v = shap_data["SHAP_v"][:,self.padding:-self.padding,
                                           self.padding:-self.padding]-SHAP_vmean.reshape(-1,1,1)
        self.field_w = shap_data["SHAP_w"][:,self.padding:-self.padding,
                                           self.padding:-self.padding]-SHAP_wmean.reshape(-1,1,1)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the velocity
        # ---------------------------------------------------------------------------------------------------------------
        data_read_vel  = {"folder":self.uvw_folder,"file":self.uvw_file,"index":self.index,
                          "dx":self.down_x,"dy":self.down_y,"dz":self.down_z,"shpx":self.shpx,"shpy":self.shpy,
                          "shpz":self.shpz,"padding":0,"data_folder":self.data_folder,"umean_file":self.umean_file}
        data_vel       = read_velocity(data_in=data_read_vel)
        self.vel_u     = data_vel["uu"]
        self.vel_v     = data_vel["vv"]
        self.vel_w     = data_vel["ww"]
        
    def calculate_matstruc(self):
        """        
        .................................................................................................................
        # calculate_matstruc
        .................................................................................................................
        Function to calculate the matrix of the nodes belonging a structure

        Returns
        -------
        None.

        """
        # ---------------------------------------------------------------------------------------------------------------
        # Load the packages
        # ---------------------------------------------------------------------------------------------------------------
        from py_bin.py_functions.shaprms import read_rms
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the RMS of the velocity
        # ---------------------------------------------------------------------------------------------------------------
        data_read_SHAPrms = {"file":self.SHAPrms_file,"folder":self.data_folder}
        data_SHAPrms      = read_rms(data_in=data_read_SHAPrms)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Calculate the product of the velocty fluctuation and the product of the RMS velocity.
        # Then obtain the matrix containing the points belonging to the structures
        # ---------------------------------------------------------------------------------------------------------------
        field_u          = self.field_u*np.heaviside(-self.field_u,0)
        field_w          = self.field_w*np.heaviside(-self.field_w,0)
        shap_xyz_1       = np.sqrt(field_u**2+field_w**2)*np.heaviside(-np.sign(self.field_v),1)
        shap_xyz_2       = np.sqrt(field_u**2+field_w**2)*np.heaviside(np.sign(self.field_v),0)
        shap_rms         = np.sqrt(data_SHAPrms["SHAP_urms"]**2+data_SHAPrms["SHAP_wrms"]**2).reshape(-1,1,1)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Two matrices are calculated:
        #     - self.mat_struc_1 : shap streaks of positive phi_v
        #     - self.mat_struc_2 : shap streaks of negative phi_v
        # ---------------------------------------------------------------------------------------------------------------
        self.mat_struc_1 = np.array(np.heaviside(shap_xyz_1-self.Hperc*shap_rms,0),dtype='bool')
        self.mat_struc_2 = np.array(np.heaviside(shap_xyz_2-self.Hperc*shap_rms,0),dtype='bool')
    
    def segment_struc(self):
        """       
        .................................................................................................................
        # segment_struc
        ................................................................................................................. 
        Function to segment the domain into the different structures

        Returns
        -------
        None.

        """
        # ---------------------------------------------------------------------------------------------------------------
        # Import packages
        # ---------------------------------------------------------------------------------------------------------------
        from py_bin.py_class.structures import structures
        from py_bin.py_functions.read_velocity import read_velocity
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the velocity
        # ---------------------------------------------------------------------------------------------------------------
        data_read_vel  = {"folder":self.uvw_folder,"file":self.uvw_file,"index":self.index,
                          "dx":self.down_x,"dy":self.down_y,"dz":self.down_z,"shpx":self.shpx,"shpy":self.shpy,
                          "shpz":self.shpz,"padding":0,"data_folder":self.data_folder,"umean_file":self.umean_file}
        data_vel       = read_velocity(data_in=data_read_vel)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the structures and obtain the nodes of each structure
        # ---------------------------------------------------------------------------------------------------------------
        data_struc_1      = {"mat_struc":self.mat_struc_1,"field_1":self.vel_u,"field_2":self.vel_v,
                             "field_3":self.vel_w,"flag_sign":False,"uvw_folder":self.uvw_folder,
                             "uvw_file":self.uvw_file,"dx":self.down_x,"dy":self.down_y,"dz":self.down_z,
                             "L_x":self.L_x,"L_y":self.L_y,"L_z":self.L_z,"rey":self.rey,"utau":self.utau,
                             "sym_quad":self.sym_quad,"filvol":self.filvol,"shap_folder":self.shap_folder,
                             "shap_file":self.shap_file}
        self.structures_1 = structures(data_in=data_struc_1)
        self.structures_1.separate_structures()
        self.structures_1.physicalproperties_structures()
        self.structures_1.segmentation()
        self.structures_1.structure_u1u2()
        self.structures_1.structure_k123()
        data_struc_2      = {"mat_struc":self.mat_struc_2,"field_1":self.vel_u,"field_2":self.vel_v,
                             "field_3":self.vel_w,"flag_sign":False,"uvw_folder":self.uvw_folder,
                             "uvw_file":self.uvw_file,"dx":self.down_x,"dy":self.down_y,"dz":self.down_z,
                             "L_x":self.L_x,"L_y":self.L_y,"L_z":self.L_z,"rey":self.rey,"utau":self.utau,
                             "sym_quad":self.sym_quad,"filvol":self.filvol,"shap_folder":self.shap_folder,
                             "shap_file":self.shap_file}
        self.structures_2 = structures(data_in=data_struc_2)
        self.structures_2.separate_structures()
        self.structures_2.physicalproperties_structures()
        self.structures_2.segmentation()
        self.structures_2.structure_u1u2()
        self.structures_2.structure_k123()
    
    def save_struc(self):
        """
        .................................................................................................................
        # save_struc
        .................................................................................................................
        Function to save the parameters of the structure

        Returns
        -------
        None.

        """
        # ---------------------------------------------------------------------------------------------------------------
        # Create the folder if not existing
        # ---------------------------------------------------------------------------------------------------------------
        try:
            print("Create folder",flush=True)
            os.mkdir(self.folder)
        except:
            print("Folder "+str(self.folder)+" is already created.",flush=True)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the path to the file
        # ---------------------------------------------------------------------------------------------------------------
        file_Q    = self.folder+"/"+self.file
        file_Q_ii = file_Q.replace("$INDEX$",str(self.index))
        if self.nsamples is None:
            file_Q_ii = file_Q_ii.replace("$NSAMPLES$","")
        else:
            file_Q_ii = file_Q_ii.replace("$NSAMPLES$",str(self.nsamples))
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the file and save the information
        # ---------------------------------------------------------------------------------------------------------------
        hf = h5py.File(file_Q_ii,'w')
        hf.create_dataset('Qs_1',data=self.mat_struc_1)
        hf.create_dataset('Qs_segment_1',data=self.structures_1.mat_segment)
        hf.create_dataset('Qs_segment_filtered_1',data=self.structures_1.mat_segment_filtered)
        hf.create_dataset('dim_x_1',data=self.structures_1.dim_x)
        hf.create_dataset('dim_z_1',data=self.structures_1.dim_z)
        hf.create_dataset('dim_y_1',data=self.structures_1.dim_y)
        hf.create_dataset('ymin_1',data=self.structures_1.ymin)
        hf.create_dataset('ymax_1',data=self.structures_1.ymax)
        hf.create_dataset('vol_1',data=self.structures_1.vol)
        hf.create_dataset('volbox_1',data=self.structures_1.boxvol)
        hf.create_dataset('cg_xbox_1',data=self.structures_1.cg_xbox)
        hf.create_dataset('cg_ybox_1',data=self.structures_1.cg_ybox)
        hf.create_dataset('cg_zbox_1',data=self.structures_1.cg_zbox)
        hf.create_dataset('cg_x_1',data=self.structures_1.cg_x)
        hf.create_dataset('cg_y_1',data=self.structures_1.cg_y)
        hf.create_dataset('cg_z_1',data=self.structures_1.cg_z)
        hf.create_dataset('uv_uvtot_1',data=self.structures_1.u1u2)
        hf.create_dataset('k_ktot_1',data=self.structures_1.k123)
        try:
            hf.create_dataset('shap_1',data=self.shap_1)
        except:
            pass
        hf.create_dataset('Qs_2',data=self.mat_struc_2)
        hf.create_dataset('Qs_segment_2',data=self.structures_2.mat_segment)
        hf.create_dataset('Qs_segment_filtered_2',data=self.structures_2.mat_segment_filtered)
        hf.create_dataset('dim_x_2',data=self.structures_2.dim_x)
        hf.create_dataset('dim_z_2',data=self.structures_2.dim_z)
        hf.create_dataset('dim_y_2',data=self.structures_2.dim_y)
        hf.create_dataset('ymin_2',data=self.structures_2.ymin)
        hf.create_dataset('ymax_2',data=self.structures_2.ymax)
        hf.create_dataset('vol_2',data=self.structures_2.vol)
        hf.create_dataset('volbox_2',data=self.structures_2.boxvol)
        hf.create_dataset('cg_xbox_2',data=self.structures_2.cg_xbox)
        hf.create_dataset('cg_ybox_2',data=self.structures_2.cg_ybox)
        hf.create_dataset('cg_zbox_2',data=self.structures_2.cg_zbox)
        hf.create_dataset('cg_x_2',data=self.structures_2.cg_x)
        hf.create_dataset('cg_y_2',data=self.structures_2.cg_y)
        hf.create_dataset('cg_z_2',data=self.structures_2.cg_z)
        hf.create_dataset('uv_uvtot_2',data=self.structures_2.u1u2)
        hf.create_dataset('k_ktot_2',data=self.structures_2.k123)
        try:
            hf.create_dataset('shap_2',data=self.shap_2)
        except:
            pass
        hf.close()
        
    def read_struc(self):
        """
        .................................................................................................................
        # read_struc
        .................................................................................................................
        Function to read the parameters of the structure

        Returns
        -------
        None.

        """
        # ---------------------------------------------------------------------------------------------------------------
        # Import packages
        # ---------------------------------------------------------------------------------------------------------------
        from py_bin.py_class.structures import structures
        
        # ---------------------------------------------------------------------------------------------------------------
        # Create the path to the file
        # ---------------------------------------------------------------------------------------------------------------
        file_Q    = self.folder+"/"+self.file
        file_Q_ii = file_Q.replace("$INDEX$",str(self.index))
        if self.nsamples is None:
            file_Q_ii = file_Q_ii.replace("$NSAMPLES$","")
        else:
            file_Q_ii = file_Q_ii.replace("$NSAMPLES$",str(self.nsamples))
        print('Reading: '+file_Q_ii,flush=True)
        
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the file with the saved information
        # ---------------------------------------------------------------------------------------------------------------
        file             = h5py.File(file_Q_ii,'r')
        self.mat_struc_1 = np.array(file['Qs_1'])
        # ---------------------------------------------------------------------------------------------------------------
        # Define the structure class
        # ---------------------------------------------------------------------------------------------------------------
        data_struc_1      = {"mat_struc":self.mat_struc_1,"field_1":self.field_u,"field_2":self.field_v,
                             "field_3":self.field_w,"flag_sign":True,"uvw_folder":self.uvw_folder,
                             "uvw_file":self.uvw_file,"dx":self.down_x,"dy":self.down_y,"dz":self.down_z,
                             "L_x":self.L_x,"L_y":self.L_y,"L_z":self.L_z,"rey":self.rey,"utau":self.utau,
                             "sym_quad":self.sym_quad,"filvol":self.filvol,"shap_folder":self.shap_folder,
                             "shap_file":self.shap_file}
        self.structures_1 = structures(data_in=data_struc_1)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the rest of the data
        # ---------------------------------------------------------------------------------------------------------------
        self.structures_1.mat_segment          = np.array(file['Qs_segment_1'])
        self.structures_1.mat_segment_filtered = np.array(file['Qs_segment_filtered_1'])
        self.structures_1.dim_x                = np.array(file['dim_x_1'])
        self.structures_1.dim_y                = np.array(file['dim_y_1'])
        self.structures_1.dim_z                = np.array(file['dim_z_1'])
        self.structures_1.ymin                 = np.array(file['ymin_1'])
        self.structures_1.ymax                 = np.array(file['ymax_1'])
        self.structures_1.vol                  = np.array(file['vol_1'])
        self.structures_1.boxvol               = np.array(file['volbox_1'])
        self.structures_1.cg_xbox              = np.array(file['cg_xbox_1'])
        self.structures_1.cg_ybox              = np.array(file['cg_ybox_1'])
        self.structures_1.cg_zbox              = np.array(file['cg_zbox_1'])
        self.structures_1.cg_x                 = np.array(file['cg_x_1'])
        self.structures_1.cg_y                 = np.array(file['cg_y_1'])
        self.structures_1.cg_z                 = np.array(file['cg_z_1'])
        self.structures_1.uv_uvtot             = np.array(file['uv_uvtot_1'])
        self.structures_1.k_ktot               = np.array(file['k_ktot_1'])
        self.structures_1.u1u2                 = np.array(file['uv_uvtot_1'])
        self.structures_1.k_ktot               = np.array(file['k_ktot_1'])
        try:
            self.shap_1                        = np.array(file['shap_1'])
        except:
            pass
        
        self.mat_struc_2 = np.array(file['Qs_2'])
        # ---------------------------------------------------------------------------------------------------------------
        # Define the structure class
        # ---------------------------------------------------------------------------------------------------------------
        data_struc_2      = {"mat_struc":self.mat_struc_2,"field_1":self.field_u,"field_2":self.field_v,
                             "field_3":self.field_w,"flag_sign":True,"uvw_folder":self.uvw_folder,
                             "uvw_file":self.uvw_file,"dx":self.down_x,"dy":self.down_y,"dz":self.down_z,
                             "L_x":self.L_x,"L_y":self.L_y,"L_z":self.L_z,"rey":self.rey,"utau":self.utau,
                             "sym_quad":self.sym_quad,"filvol":self.filvol,"shap_folder":self.shap_folder,
                             "shap_file":self.shap_file}
        self.structures_2 = structures(data_in=data_struc_2)
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the rest of the data
        # ---------------------------------------------------------------------------------------------------------------
        self.structures_2.mat_segment          = np.array(file['Qs_segment_2'])
        self.structures_2.mat_segment_filtered = np.array(file['Qs_segment_filtered_2'])
        self.structures_2.dim_x                = np.array(file['dim_x_2'])
        self.structures_2.dim_y                = np.array(file['dim_y_2'])
        self.structures_2.dim_z                = np.array(file['dim_z_2'])
        self.structures_2.ymin                 = np.array(file['ymin_2'])
        self.structures_2.ymax                 = np.array(file['ymax_2'])
        self.structures_2.vol                  = np.array(file['vol_2'])
        self.structures_2.boxvol               = np.array(file['volbox_2'])
        self.structures_2.cg_xbox              = np.array(file['cg_xbox_2'])
        self.structures_2.cg_ybox              = np.array(file['cg_ybox_2'])
        self.structures_2.cg_zbox              = np.array(file['cg_zbox_2'])
        self.structures_2.cg_x                 = np.array(file['cg_x_2'])
        self.structures_2.cg_y                 = np.array(file['cg_y_2'])
        self.structures_2.cg_z                 = np.array(file['cg_z_2'])
        self.structures_2.uv_uvtot             = np.array(file['uv_uvtot_2'])
        self.structures_2.k_ktot               = np.array(file['k_ktot_2'])
        self.structures_2.u1u2                 = np.array(file['uv_uvtot_2'])
        self.structures_2.k_ktot               = np.array(file['k_ktot_2'])
        try:
            self.shap_2                        = np.array(file['shap_2'])
        except:
            pass
        file.close()
          
    def add_SHAP(self,data_in={"nsamples":1}):
        """
        .................................................................................................................
        # add_SHAP
        .................................................................................................................
        Function for adding the total SHAP value of each structure to the structures file
        
        Parameters
        ----------
        data_in : dict, optional
            Name of the folder and file of the file of the previous data.
            The default is {"nsamples":1}.
            Data:
                - nsamples : number of samples of the shap
        
        Returns
        -------
        None.
        
        """
        # ---------------------------------------------------------------------------------------------------------------
        # Import packages
        # ---------------------------------------------------------------------------------------------------------------
        from py_bin.py_class.shap_config import shap_config
        
        # ---------------------------------------------------------------------------------------------------------------
        # Read the data
        # ---------------------------------------------------------------------------------------------------------------
        nsamples = int(data_in["nsamples"])
        
        # ---------------------------------------------------------------------------------------------------------------
        # Calculate the SHAP value of the structure and save it
        # ---------------------------------------------------------------------------------------------------------------
        shap_data          = np.zeros((self.shpy,self.shpz,self.shpx,3))
        shap_data[:,:,:,0] = self.field_u
        shap_data[:,:,:,1] = self.field_v 
        shap_data[:,:,:,2] = self.field_w
        
        # ---------------------------------------------------------------------------------------------------------------
        # For every structure sum all the norms of the SHAP values of the nodes of the structure
        #     - nn : index of the structure
        #     - nodes_nn : indices of the nodes of the structure nn
        # ---------------------------------------------------------------------------------------------------------------
        max_struc_1 = int(np.max(self.structures_1.mat_segment))
        self.shap_1 = np.zeros((max_struc_1,))
        for nn  in np.arange(max_struc_1-1):
            nodes_nn         = np.where(self.structures_1.mat_segment==nn+1)
            self.shap_1[nn] += np.linalg.norm(shap_data[nodes_nn])
        max_struc_2 = int(np.max(self.structures_2.mat_segment))
        self.shap_2 = np.zeros((max_struc_2,))
        for nn  in np.arange(max_struc_2-1):
            nodes_nn         = np.where(self.structures_2.mat_segment==nn+1)
            self.shap_2[nn] += np.linalg.norm(shap_data[nodes_nn])
        
 